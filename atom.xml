<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Technical Journal]]></title>
  <link href="http://davidad.github.io/atom.xml" rel="self"/>
  <link href="http://davidad.github.io/"/>
  <updated>2014-02-25T21:10:40-05:00</updated>
  <id>http://davidad.github.io/</id>
  <author>
    <name><![CDATA[davidad (David A. Dalrymple)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Overkilling the 8-queens Problem]]></title>
    <link href="http://davidad.github.io/blog/2014/02/25/overkilling-the-8-queens-problem/"/>
    <updated>2014-02-25T10:52:57-05:00</updated>
    <id>http://davidad.github.io/blog/2014/02/25/overkilling-the-8-queens-problem</id>
    <content type="html"><![CDATA[<p>Last night, a fellow <a href="http://www.hackerschool.com">Hacker School</a>er challenged
me to a running-time contest on the classic <a href="http://en.wikipedia.org/wiki/Eight_queens_puzzle">eight queens
puzzle</a>. Naturally, I pulled
up my trusty <a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf">Intel® 64
manual</a>
and got to work. It turned out to be even faster than I expected, churning out
pretty-printed output in 15ms, which is totally dominated by the time it takes
the terminal to display it (it takes only 2ms if redirected to a file).</p>

<p><strong>Update</strong>: Very slightly more scientific
<a href="https://github.com/davidad/8queens/tree/%2Bc_comparison">testing</a>, spurred by
curious <a href="https://news.ycombinator.com/item?id=7301913">Hacker News commenters</a>,
indicates that, without pretty-printing and other overhead, the solving time is
actually closer to 11.2&#181;s &mdash; about a factor of 7 speedup over commenter
<a href="https://news.ycombinator.com/item?id=7302005">bluecalm</a>&rsquo;s <a href="https://github.com/davidad/8queens/blob/%2Bc_comparison/8q_C_bluecalm.c">C
implementation</a>.</p>

<p><img src="http://i.imgur.com/5dOH49e.png" alt="pretty-printed output" /></p>

<!-- more -->


<p>(<a href="http://i.imgur.com/qjckCeo.png">Click here to see the full output.</a>)</p>

<h2>The Approach</h2>

<p>My solution method is heavily inspired by <a href="http://www.cl.cam.ac.uk/~mr10/backtrk.pdf">this
paper</a> (which, appropriately enough,
concerns a beautifully insane programming language called MCPL, combining
features from ML, C, and Prolog). This paper contributes two key insights about
solving the 8-queens problem:</p>

<ul>
<li><p>Conceptually, we can model the solution space as the leaves of a tree, where
each internal node of the tree corresponds to a partial board (with the number
of queens equal to the tree depth), and each parent-child link represents
adding another queen at the row number corresponding to the depth of the
child. Since there can only be one queen per row in a correct solution, this
tree is a superset of the actual solution set.</p></li>
<li><p>Instead of actually constructing the tree, we can simply keep track of the
current traversal state. In particular, this means we keep track of the
currently occupied columns, the occupied leftward going diagonals, and the
occupied rightward going diagonals, as they intersect the current row. (Each
of these three state variables is eight bits of information.) In addition, we
can keep track of the past traversal history of each level using <del>a</del> the
stack.</p></li>
</ul>


<p>If any of this is unclear, <a href="http://www.cl.cam.ac.uk/~mr10/backtrk.pdf">check out the
paper</a>, which has a beautiful diagram
that there is no need for me to attempt replicating.</p>

<h2>The Code</h2>

<p>I&rsquo;m going to go through the first<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> version of the code, which doesn&rsquo;t
produce the pretty boards but has most of the clever tricks. (Ironically,
adding &ldquo;pretty printing&rdquo; made my code uglier. Maybe it&rsquo;s just
that I was up too late working on it.)</p>

<p>The heart of this algorithm is the sequence that updates the state variables as
we move from one layer into the next. This whole program is small enough that
it&rsquo;s still practical to just set aside registers to represent most variables;
in particular, <code>rdx</code> represents where it&rsquo;s okay to place a queen at the current
layer (e.g. it starts out as <code>0b11111111</code>), and <code>xmm1</code> (one of those fancy
128-bit registers that supports fancy new operations) stores the &ldquo;occupied left
diagonals&rdquo;, &ldquo;occupied right diagonals&rdquo;, and &ldquo;occupied columns&rdquo; states, in that
order (with &ldquo;occupied columns&rdquo; being the least significant word<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>). <code>xmm2</code>,
<code>xmm3</code>, and <code>xmm4</code> are just being used as scratch space. Finally, <code>xmm7</code> is a
constant <code>0xff</code>.</p>

<h3>Instruction Dictionary</h3>

<p>To spare you the effort of searching through the Intel® 64 manual yourself, here
are brief descriptions of all the fancy instructions I&rsquo;m about to use.</p>

<ul>
<li><code>vpsllw</code>: <strong>Vector/Packed Shift Left (Logical) Words</strong>. <em>Separately</em> shifts
left every word of the second argument by the number of bits represented as
the third argument, and store the result to the first argument.</li>
<li><code>vpsrlw</code>: <strong>Vector/Packed Shift Right (Logical) Words</strong>. <em>Separately</em> shifts
right every word of the second argument by the number of bits represented as
the third argument, and store the result to the first argument.</li>
<li><code>pblendw</code>: <strong>Packed Blend Words</strong>. Using the third argument as a mask,
selectively copy words from the second argument to the first argument.</li>
<li><code>vpsrldq</code>: <strong>Vector/Packed Shift Right (Logical) Double Quadword</strong>. Shifts the
entire second argument by the number of bytes specified in the third argument,
and stores the result to the first argument.</li>
<li><code>por</code>: <strong>Parallel OR</strong>. Bitwise ORs the first and second argument and assigns
the result to the first argument.</li>
<li><code>vpandn</code>: <strong>Vector/Parallel AND NOT</strong>. Inverts the second argument, ANDs the
result with the third argument, and assigns the result of <em>that</em> to the first
argument.</li>
<li><code>movq</code>: <strong>Move Quadword</strong>. The standard way to move data between <code>xmm</code> registers and normal
 registers.</li>
</ul>


<p>Now, let&rsquo;s take this a few lines at a time.
<figure class='code'><figcaption>8queens.asm<a href='https://github.com/davidad/8queens/blob/1989666c45baa639f152dfc89c70635f7007d20b/8queens.asm#L25'>github</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code>  <span class="nf">vpsllw</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">1</span>      <span class="c1">; shift entire state to left, place in xmm2</span>
</code></div><div class='line'><code>  <span class="nf">vpsrlw</span> <span class="nv">xmm3</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">1</span>      <span class="c1">; shift entire state to right, place in xmm3</span>
</code></div><div class='line'><code>  <span class="nf">pblendw</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="m">0b</span><span class="mi">100</span> <span class="c1">; only copy &quot;left-attacking&quot; word back from xmm2</span>
</code></div><div class='line'><code>  <span class="nf">pblendw</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">xmm3</span><span class="p">,</span> <span class="m">0b</span><span class="mi">010</span> <span class="c1">; only copy &quot;right-attacking&quot; word back from xmm3</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>If you&rsquo;re accustomed to C, you might think of this as functionally equivalent to
something like <code>xmm1[2] &lt;&lt;= 1; xmm1[1] &gt;&gt;=1</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. We want the word in position 1 to
shift right and the word in position 2 to shift left, while the word in position
0 (occupied columns) stays put.</p>

<p><figure class='code'><figcaption>8queens.asm<a href='https://github.com/davidad/8queens/blob/1989666c45baa639f152dfc89c70635f7007d20b/8queens.asm#L29'>github</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code>  <span class="nf">vpsrldq</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">4</span>     <span class="c1">; shift state right 4 <em>bytes</em>, place in xmm2</span>
</code></div><div class='line'><code>  <span class="nf">vpsrldq</span> <span class="nv">xmm3</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">2</span>     <span class="c1">; shift state right 2 bytes, place in xmm3</span>
</code></div><div class='line'><code>  <span class="nf">por</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm3</span>            <span class="c1">; collect bitwise ors in xmm2</span>
</code></div><div class='line'><code>  <span class="nf">por</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm1</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>Now, we want to combine the information about which squares in the next layer
are under attack. It doesn&rsquo;t matter from which direction &mdash; we want to make sure
not to put a queen there. So, we shift right 2 words (= 4 bytes) and right 1 word
(= 2 bytes) and OR them all together (accumulating into a scratch register so we
don&rsquo;t clobber our state).</p>

<p><figure class='code'><figcaption>8queens.asm<a href='https://github.com/davidad/8queens/blob/1989666c45baa639f152dfc89c70635f7007d20b/8queens.asm#L33'>github</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code>  <span class="nf">vpandn</span> <span class="nv">xmm4</span><span class="p">,</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm7</span>   <span class="c1">; invert and select low byte</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">xmm4</span>            <span class="c1">; place in rdx</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="nv">next_state</span>           <span class="c1">; now we&#39;re set up to iterate</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>But that still contains some stuff in the upper bytes. We only want the lower
byte. And we also want <code>1</code> bits where queens <em>should</em> be allowed, rather than
where they&rsquo;re under attack. We can solve both problems with one <code>vpandn</code>
instruction, which will flip all the bits, but mask out everything except the
first byte (since <code>xmm7</code>=<code>0xff</code>).</p>

<p>So, now that we&rsquo;re iterating, what happens <em>next</em>?</p>

<h3>Instruction Dictionary</h3>

<ul>
<li><code>bsf</code>: <strong>Bit Scan Forward</strong>. Finds the least significant <code>1</code> bit in the second
argument and stores the index of that bit into the first argument. If there is
no <code>1</code> bit the second argument, the value of the first argument is undefined,
and the zero flag (<code>ZF</code>) is set.</li>
<li><code>btc</code>: <strong>Bit Clear</strong>. Clears the bit in the first argument with index given by
the second argument.</li>
<li><code>je</code>: <strong>Jump If Equal</strong>. Pretty self-explanatory, when used in conjunction
with <code>cmp</code> (<strong>Compare</strong>).</li>
<li><code>jz</code>: <strong>Jump If Zero</strong>. Jumps to the specified address/label if the zero flag
(ZF) is set.</li>
<li><code>push</code>: <strong>Push To Stack</strong>. Stores its single argument to the memory location
pointed by <code>rsp</code>, and decrements <code>rsp</code> (usually by eight at a time, i.e., <code>rsp &lt;- rsp-8</code>).</li>
<li><code>shl</code>: <strong>Logical Shift Left</strong> for non-<code>xmm</code> registers.</li>
</ul>


<p><figure class='code'><figcaption>8queens.asm<a href='https://github.com/davidad/8queens/blob/1989666c45baa639f152dfc89c70635f7007d20b/8queens.asm#L12'>github</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code><span class="nl">next_state:</span>
</code></div><div class='line'><code>  <span class="nf">bsf</span> <span class="nb">rcx</span><span class="p">,</span> <span class="nb">rdx</span>             <span class="c1">; find next available position in current level</span>
</code></div><div class='line'><code>  <span class="nf">jz</span> <span class="nv">backtrack</span>             <span class="c1">; if there is no available position, we must go back</span>
</code></div><div class='line'><code>  <span class="nf">btc</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rcx</span>             <span class="c1">; mark position as unavailable</span>
</code></div><div class='line'><code>  <span class="nf">cmp</span> <span class="nb">rsp</span><span class="p">,</span> <span class="nv">r14</span>             <span class="c1">; check if we&#39;ve done 7 levels already</span>
</code></div><div class='line'><code>  <span class="nf">je</span> <span class="nv">win</span>                   <span class="c1">; if so, we have a win state. otherwise continue</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">r10</span><span class="p">,</span> <span class="nv">xmm1</span>           <span class="c1">; save current state &hellip;</span>
</code></div><div class='line'><code>  <span class="nf">push</span> <span class="nb">rdx</span>
</code></div><div class='line'><code>  <span class="nf">push</span> <span class="nv">r10</span>                 <span class="c1">;   &hellip; to stack</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">r15</span>             <span class="c1">; set up attack mask</span>
</code></div><div class='line'><code>  <span class="nf">shl</span> <span class="nb">rax</span><span class="p">,</span> <span class="nb">cl</span>              <span class="c1">; shift into position</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nb">rax</span>
</code></div><div class='line'><code>  <span class="nf">por</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">xmm2</span>           <span class="c1">; mark as attacking in all directions</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>First we try scanning for an available position on this row &mdash; one that isn&rsquo;t
under attack from already-placed queens, and that also hasn&rsquo;t already been
visited. If there is none, then we have no choice but to <code>backtrack</code> (a little
piece of code which is coming up soon). Assuming we find an available position,
we first mark it as visited/unavailable. We then check if this is the last
level that needs to be taken care of, by looking at the stack pointer. Since
the stack gets deeper by 16 bytes with every level, this test<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> is easily set
up at program initialization. If the test is true, then we&rsquo;ve discovered a
solution, or &ldquo;win state&rdquo; &mdash; so we go ahead to the &ldquo;win&rdquo; code.</p>

<p>If we&rsquo;ve neither succeeded nor failed, it means we just have to go another
level down in the tree. In order to have an efficient backtracking capability,
we store our state variables on the stack, so they can be restored when
everything fails deeper down in the tree. Finally, we update our model of which
squares are in danger by adding the queen we&rsquo;re currently placing as a
column-occupier and diagonal-occupier (modifying all three state variables at
once with the magic of <code>por</code>). Note here that <code>cl</code> is just a name for the least
significant byte of the <code>rcx</code> register, which houses the horizontal position of
the new queen.</p>

<p>What if we have to backtrack?
<figure class='code'><figcaption>8queens.asm<a href='https://github.com/davidad/8queens/blob/1989666c45baa639f152dfc89c70635f7007d20b/8queens.asm#L37'>github</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='37' class='line-number'></div><div data-line='38' class='line-number'></div><div data-line='39' class='line-number'></div><div data-line='40' class='line-number'></div><div data-line='41' class='line-number'></div><div data-line='42' class='line-number'></div><div data-line='43' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code><span class="nl">backtrack:</span>
</code></div><div class='line'><code>  <span class="nf">cmp</span> <span class="nb">rsp</span><span class="p">,</span> <span class="nv">r13</span>             <span class="c1">; are we done?</span>
</code></div><div class='line'><code>  <span class="nf">je</span> <span class="nv">done</span>
</code></div><div class='line'><code>  <span class="nf">pop</span> <span class="nv">r10</span>                  <span class="c1">; restore last state</span>
</code></div><div class='line'><code>  <span class="nf">pop</span> <span class="nb">rdx</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">r10</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="nv">next_state</span>           <span class="c1">; try again</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>First, we have another stack-pointer test &ndash; if we&rsquo;ve tried to backtrack past
the start of the program, then we know we&rsquo;ve exhausted all possibilities and
just go to <code>done</code>. Assuming that&rsquo;s not at issue, we simply restore the <code>rdx</code>
and <code>xmm1</code> variables (using <code>r10</code> as scratch storage since one can&rsquo;t directly
pop <code>xmm</code> registers). Then we just jump back into our loop, with a new state
ready to go!</p>

<p>Now we&rsquo;re ready to look at the whole solution in context:
<figure class='code'><figcaption>8queens.asm<a href='https://github.com/davidad/8queens/blob/1989666c45baa639f152dfc89c70635f7007d20b/8queens.asm'>github</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div><div data-line='36' class='line-number'></div><div data-line='37' class='line-number'></div><div data-line='38' class='line-number'></div><div data-line='39' class='line-number'></div><div data-line='40' class='line-number'></div><div data-line='41' class='line-number'></div><div data-line='42' class='line-number'></div><div data-line='43' class='line-number'></div><div data-line='44' class='line-number'></div><div data-line='45' class='line-number'></div><div data-line='46' class='line-number'></div><div data-line='47' class='line-number'></div><div data-line='48' class='line-number'></div><div data-line='49' class='line-number'></div><div data-line='50' class='line-number'></div><div data-line='51' class='line-number'></div><div data-line='52' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code><span class="cp">%include &quot;os_dependent_stuff.asm&quot;</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="m">0b</span><span class="mi">11111111</span>      <span class="c1">; all eight possibilities available</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nv">r8</span><span class="p">,</span> <span class="mh">0x000000000000</span>   <span class="c1">; no squares under attack from anywhere</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">r8</span>            <span class="c1">; maintain this state in xmm1</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nv">r15</span><span class="p">,</span> <span class="mh">0x000100010001</span>  <span class="c1">; attack mask for one queen (left, right, and center)</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nv">r14</span><span class="p">,</span> <span class="mh">0xff</span>            <span class="c1">; mask for low byte</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">xmm7</span><span class="p">,</span> <span class="nv">r14</span>           <span class="c1">; stored in xmm register</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nv">r13</span><span class="p">,</span> <span class="nb">rsp</span>             <span class="c1">; current stack pointer (if we backtrack here, then</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nv">r14</span><span class="p">,</span> <span class="nb">rsp</span>             <span class="c1">;   the entire solution space has been explored)</span>
</code></div><div class='line'><code>  <span class="nf">sub</span> <span class="nv">r14</span><span class="p">,</span> <span class="mi">2</span><span class="o"><em></span><span class="mi">8</span><span class="o"></em></span><span class="mi">7</span>           <span class="c1">; this is where the stack pointer would be when we&#39;ve</span>
</code></div><div class='line'><code>                           <span class="c1">;   completed a winning state</span>
</code></div><div class='line'><code><span class="nl">next_state:</span>
</code></div><div class='line'><code>  <span class="nf">bsf</span> <span class="nb">rcx</span><span class="p">,</span> <span class="nb">rdx</span>             <span class="c1">; find next available position in current level</span>
</code></div><div class='line'><code>  <span class="nf">jz</span> <span class="nv">backtrack</span>             <span class="c1">; if there is no available position, we must go back</span>
</code></div><div class='line'><code>  <span class="nf">btc</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rcx</span>             <span class="c1">; mark position as unavailable</span>
</code></div><div class='line'><code>  <span class="nf">cmp</span> <span class="nb">rsp</span><span class="p">,</span> <span class="nv">r14</span>             <span class="c1">; check if we&#39;ve done 7 levels already</span>
</code></div><div class='line'><code>  <span class="nf">je</span> <span class="nv">win</span>                   <span class="c1">; if so, we have a win state. otherwise continue</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">r10</span><span class="p">,</span> <span class="nv">xmm1</span>           <span class="c1">; save current state &hellip;</span>
</code></div><div class='line'><code>  <span class="nf">push</span> <span class="nb">rdx</span>
</code></div><div class='line'><code>  <span class="nf">push</span> <span class="nv">r10</span>                 <span class="c1">;   &hellip; to stack</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">r15</span>             <span class="c1">; set up attack mask</span>
</code></div><div class='line'><code>  <span class="nf">shl</span> <span class="nb">rax</span><span class="p">,</span> <span class="nb">cl</span>              <span class="c1">; shift into position</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nb">rax</span>
</code></div><div class='line'><code>  <span class="nf">por</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">xmm2</span>           <span class="c1">; mark as attacking in all directions</span>
</code></div><div class='line'><code>  <span class="nf">vpsllw</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">1</span>      <span class="c1">; shift entire state to left, place in xmm2</span>
</code></div><div class='line'><code>  <span class="nf">vpsrlw</span> <span class="nv">xmm3</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">1</span>      <span class="c1">; shift entire state to right, place in xmm3</span>
</code></div><div class='line'><code>  <span class="nf">pblendw</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="m">0b</span><span class="mi">100</span> <span class="c1">; only copy &quot;left-attacking&quot; word back from xmm2</span>
</code></div><div class='line'><code>  <span class="nf">pblendw</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">xmm3</span><span class="p">,</span> <span class="m">0b</span><span class="mi">010</span> <span class="c1">; only copy &quot;right-attacking&quot; word back from xmm3</span>
</code></div><div class='line'><code>  <span class="nf">vpsrldq</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">4</span>     <span class="c1">; shift state right 4 <em>bytes</em>, place in xmm2</span>
</code></div><div class='line'><code>  <span class="nf">vpsrldq</span> <span class="nv">xmm3</span><span class="p">,</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="mi">2</span>     <span class="c1">; shift state right 2 bytes, place in xmm3</span>
</code></div><div class='line'><code>  <span class="nf">por</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm3</span>            <span class="c1">; collect bitwise ors in xmm2</span>
</code></div><div class='line'><code>  <span class="nf">por</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm1</span>
</code></div><div class='line'><code>  <span class="nf">vpandn</span> <span class="nv">xmm4</span><span class="p">,</span> <span class="nv">xmm2</span><span class="p">,</span> <span class="nv">xmm7</span>   <span class="c1">; invert and select low byte</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nv">xmm4</span>            <span class="c1">; place in rdx</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="nv">next_state</span>           <span class="c1">; now we&#39;re set up to iterate</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nl">backtrack:</span>
</code></div><div class='line'><code>  <span class="nf">cmp</span> <span class="nb">rsp</span><span class="p">,</span> <span class="nv">r13</span>             <span class="c1">; are we done?</span>
</code></div><div class='line'><code>  <span class="nf">je</span> <span class="nv">done</span>
</code></div><div class='line'><code>  <span class="nf">pop</span> <span class="nv">r10</span>                  <span class="c1">; restore last state</span>
</code></div><div class='line'><code>  <span class="nf">pop</span> <span class="nb">rdx</span>
</code></div><div class='line'><code>  <span class="nf">movq</span> <span class="nv">xmm1</span><span class="p">,</span> <span class="nv">r10</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="nv">next_state</span>           <span class="c1">; try again</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nl">win:</span>
</code></div><div class='line'><code>  <span class="nf">inc</span> <span class="nv">r8</span>                   <span class="c1">; increment solution counter</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="nv">next_state</span>           <span class="c1">; keep going</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nl">done:</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nv">r8</span>              <span class="c1">; set system call argument to solution count</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="nv">SYSCALL_EXIT</span>    <span class="c1">; set system call to exit</span>
</code></div><div class='line'><code>  <span class="nf">syscall</span>                  <span class="c1">; this will exit with our solution count as status</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>If you&rsquo;re curious to investigate further, <a href="https://github.com/davidad/8queens">run the code
yourself</a><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> and/or check out the <a href="https://github.com/davidad/8queens/blob/master/8queens.asm">more
complicated, pretty-printing
version</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Somewhat surprisingly, the first version actually <em>worked</em>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>A word is two bytes. Why did I use words and not just bytes? The answer is that some of the fancy instructions we want to use don&rsquo;t allow us to work with data elements any smaller than words.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>But it&rsquo;s all taking place in the register file &mdash; no memory accesses here!<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>That is to say, the value of <code>r14</code>.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Requires a recent (Sandy Bridge or later) Intel CPU.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Relocatable vs. Position-Independent Code (or, Virtual Memory Isn't Just for Swap)]]></title>
    <link href="http://davidad.github.io/blog/2014/02/19/relocatable-vs-position-independent-code-or/"/>
    <updated>2014-02-19T17:12:50-05:00</updated>
    <id>http://davidad.github.io/blog/2014/02/19/relocatable-vs-position-independent-code-or</id>
    <content type="html"><![CDATA[<blockquote><p><strong>Myth</strong>: &ldquo;Virtual memory&rdquo; is the mechanism that a kernel uses to make more
memory available than is actually physically installed, by setting aside a
disk partition for the overflow and copying pages between memory and disk as
needed.</p></blockquote>

<p>I acquired this belief very early in my programming career, but it turns out
that swapping pages to disk is merely one of the many things that &ldquo;virtual
memory&rdquo; makes possible.</p>

<blockquote><p><strong>Fact</strong>: &ldquo;Virtual memory&rdquo; is a <em>hardware</em> (CPU) mechanism, which, every
single time memory is accessed, references a kernel-specified data structure
called a &ldquo;page table&rdquo; to arbitrarily
<a href="http://www.catb.org/jargon/html/F/frobnicate.html">frobnicate</a> the high bits
of the address, which is called &ldquo;translating&rdquo; from a &ldquo;linear address&rdquo; to a
&ldquo;physical address&rdquo;. (The page table gets cached by a <a href="http://en.wikipedia.org/wiki/Translation_lookaside_buffer">translation lookaside
buffer</a>, so the
lookup is usually quite efficient!)</p></blockquote>

<p>This fact became very real to me this week as I made a <a href="http://davidad.github.io/blog/2014/02/18/kernel-from-scratch/">kernel from
scratch</a>: I was moderately surprised
that I <em>needed</em> to set up a page table, when I had always thought of virtual
memory as a somewhat advanced kernel feature. Today, I learned how &ldquo;relocatable&rdquo;
and &ldquo;PIC&rdquo; &mdash; terms I&rsquo;d encountered in the past and never really understood &mdash;
suddenly make sense in this context.  <!-- more --></p>

<p>Here&rsquo;s another fact that surprised me: in conventional operating systems,
<strong>every process has its own page table</strong>. The pointer <code>0x7fff8000</code> does not
necessarily translate to the same physical address in one process as it does in
another<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>Now, let&rsquo;s talk about libraries. Libraries are code, but they don&rsquo;t run as
processes of their own. They&rsquo;re going to wind up under someone else&rsquo;s page
table. There&rsquo;s two ways that can happen: static linking and dynamic linking<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<ul>
<li>If a library is statically linked, the linker finds some place in a code
segment of the executable to situate the library. The loader will then place
this segment in virtual memory (wherever it&rsquo;s explicitly specified to go) when
the executable is run.</li>
<li>If a library is dynamically
linked, then when the loader sets up the executable, it will invoke the dynamic
linker to make sure that the
required library shows up some place in the process&rsquo;s virtual memory<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</li>
</ul>


<p>Whether static or dynamic, a linked library is going to be situated in virtual
memory somewhere that the library can&rsquo;t predict<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, which is problematic for
accessing its own memory.  Fortunately, the linker (whether static or dynamic)
can help us out by <strong>relocating</strong> the library&rsquo;s code, so that it knows where it
is.  Unfortunately, library writers have to help the linker out by specifying,
in the object file, the set of instructions or initialized data that need to be
modified to properly relocate it. As long as all that &ldquo;relocation information&rdquo;
is present, the object file is said to be <strong>relocatable</strong>.</p>

<p>On the other hand, <strong>position-independent code</strong> (<strong>PIC</strong>), as the name
suggests, doesn&rsquo;t even need to be relocated. None of its instructions or
initialized data encode any assumptions about the region of virtual memory the
program will be loaded into; it figures out where it is (usually by referencing
the instruction pointer) and makes all memory accesses based on what it finds
out.</p>

<p>So why do all that work when the linker can relocate for us?</p>

<p>Here&rsquo;s the kicker. The whole motivation for dynamic linking was <strong>shared
libraries</strong>. <strong>Shared</strong> doesn&rsquo;t just mean that multiple programs reference the
same library file on disk. It means those processes share that library <strong>in
physical memory</strong><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.  Since every process has its own page table, the exact
same library code winds up executing as if it were loaded into multiple,
inconsistent virtual memory locations.  If we relocated it for one process, it
wouldn&rsquo;t necessarily be valid for another. <strong>This is why weird things sometimes
happen where the solution is &ldquo;recompile <code>blah</code> with <code>-fPIC</code>&rdquo;</strong>.</p>

<hr />

<p>Perhaps the most interesting thing about all this is that in today&rsquo;s 64-bit age,
position-independent code may not even be necessary. The available virtual
memory address space with 64 bits is so large that an OS may be able to afford
blocking off a region of <em>every</em> process&rsquo;s virtual memory space to host <em>every</em>
shared library on the system, so that their linear locations are guaranteed to
be consistent from process to process. That means shared libraries would still
have to be relocatable, but they wouldn&rsquo;t have to be PIC.</p>

<p>On the other hand, x86_64 makes it <a href="http://eli.thegreenplace.net/2011/11/11/position-independent-code-pic-in-shared-libraries-on-x64/">significantly
easier</a>
to write position-independent code, by referring addresses to the current
program counter (so no matter what virtual memory offset the code is at, it&rsquo;s
internally consistent). If we adopt a policy that <em>all</em> libraries (static and
dynamic) are PIC, then libraries don&rsquo;t ever have to worry about being relocated
and the linker gets a lot simpler.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is one of the things that differentiates a &ldquo;process&rdquo; from a &ldquo;thread&rdquo;: <strong>threads</strong> don&rsquo;t have their own page tables.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Just as with static typechecking and dynamic typechecking, &ldquo;static&rdquo; means that it happens before the program is invoked, and &ldquo;dynamic&rdquo; means that happens after the program is invoked.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The loader also needs to populate a series of &ldquo;slots&rdquo; at fixed addresses with instructions that jump into where the library is (since the executable won&rsquo;t know in advance where the library will show up, unlike with static linking). But that part of dynamic linking is a distraction for the discussion of relocatable vs. PIC.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>unlike a stand-alone executable, which can request (almost) any virtual memory address that it wants (since it has the whole page table to itself)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>In fact, in most operating systems, if multiple processes map the same file into their virtual memory, and none of them write to it, those processes' page tables will translate each of their process-specific addresses for that file to the <strong>same pages</strong> of physical memory.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel From Scratch]]></title>
    <link href="http://davidad.github.io/blog/2014/02/18/kernel-from-scratch/"/>
    <updated>2014-02-18T02:58:08-05:00</updated>
    <id>http://davidad.github.io/blog/2014/02/18/kernel-from-scratch</id>
    <content type="html"><![CDATA[<p>One of my 3 major goals for Hacker School was to create a bootable, 64-bit
kernel image from scratch, using only <code>nasm</code> and my text editor. Well, folks,
one down, two to go.</p>

<p><img src="http://i.imgur.com/vnYFaFZ.png" alt="Hello, kernel!" /></p>

<!-- more -->


<p>The NASM/x64 assembly code is listed below, with copious comments for your
pleasure.  It comprises 136 lines including comments; 75 with comments
removed.  You may wish to refer to the <a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf">Intel&reg; 64 Software Developers'
Manual (16.5MB
PDF)</a>,
especially if you&rsquo;re interested in doing something similar yourself.
Building and running is as simple as</p>

<pre><code>$ nasm boot.asm -o bootable.bin
$ qemu-system-x86_64 bootable.bin
</code></pre>

<p>That is, assuming that you have recent versions of
<a href="http://www.nasm.us/pub/nasm/releasebuilds/2.11/macosx/">nasm</a> and
<a href="http://wiki.qemu.org/Download">qemu</a> installed.</p>

<p>Let&rsquo;s get to the code!</p>

<p><figure class='code'><figcaption>boot.asm<a href='https://raw.github.com/davidad/mesh/ffbd5935d7218eddbaa43b991d1eaa4e277ecf86/boot.asm'>raw</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div><div data-line='36' class='line-number'></div><div data-line='37' class='line-number'></div><div data-line='38' class='line-number'></div><div data-line='39' class='line-number'></div><div data-line='40' class='line-number'></div><div data-line='41' class='line-number'></div><div data-line='42' class='line-number'></div><div data-line='43' class='line-number'></div><div data-line='44' class='line-number'></div><div data-line='45' class='line-number'></div><div data-line='46' class='line-number'></div><div data-line='47' class='line-number'></div><div data-line='48' class='line-number'></div><div data-line='49' class='line-number'></div><div data-line='50' class='line-number'></div><div data-line='51' class='line-number'></div><div data-line='52' class='line-number'></div><div data-line='53' class='line-number'></div><div data-line='54' class='line-number'></div><div data-line='55' class='line-number'></div><div data-line='56' class='line-number'></div><div data-line='57' class='line-number'></div><div data-line='58' class='line-number'></div><div data-line='59' class='line-number'></div><div data-line='60' class='line-number'></div><div data-line='61' class='line-number'></div><div data-line='62' class='line-number'></div><div data-line='63' class='line-number'></div><div data-line='64' class='line-number'></div><div data-line='65' class='line-number'></div><div data-line='66' class='line-number'></div><div data-line='67' class='line-number'></div><div data-line='68' class='line-number'></div><div data-line='69' class='line-number'></div><div data-line='70' class='line-number'></div><div data-line='71' class='line-number'></div><div data-line='72' class='line-number'></div><div data-line='73' class='line-number'></div><div data-line='74' class='line-number'></div><div data-line='75' class='line-number'></div><div data-line='76' class='line-number'></div><div data-line='77' class='line-number'></div><div data-line='78' class='line-number'></div><div data-line='79' class='line-number'></div><div data-line='80' class='line-number'></div><div data-line='81' class='line-number'></div><div data-line='82' class='line-number'></div><div data-line='83' class='line-number'></div><div data-line='84' class='line-number'></div><div data-line='85' class='line-number'></div><div data-line='86' class='line-number'></div><div data-line='87' class='line-number'></div><div data-line='88' class='line-number'></div><div data-line='89' class='line-number'></div><div data-line='90' class='line-number'></div><div data-line='91' class='line-number'></div><div data-line='92' class='line-number'></div><div data-line='93' class='line-number'></div><div data-line='94' class='line-number'></div><div data-line='95' class='line-number'></div><div data-line='96' class='line-number'></div><div data-line='97' class='line-number'></div><div data-line='98' class='line-number'></div><div data-line='99' class='line-number'></div><div data-line='100' class='line-number'></div><div data-line='101' class='line-number'></div><div data-line='102' class='line-number'></div><div data-line='103' class='line-number'></div><div data-line='104' class='line-number'></div><div data-line='105' class='line-number'></div><div data-line='106' class='line-number'></div><div data-line='107' class='line-number'></div><div data-line='108' class='line-number'></div><div data-line='109' class='line-number'></div><div data-line='110' class='line-number'></div><div data-line='111' class='line-number'></div><div data-line='112' class='line-number'></div><div data-line='113' class='line-number'></div><div data-line='114' class='line-number'></div><div data-line='115' class='line-number'></div><div data-line='116' class='line-number'></div><div data-line='117' class='line-number'></div><div data-line='118' class='line-number'></div><div data-line='119' class='line-number'></div><div data-line='120' class='line-number'></div><div data-line='121' class='line-number'></div><div data-line='122' class='line-number'></div><div data-line='123' class='line-number'></div><div data-line='124' class='line-number'></div><div data-line='125' class='line-number'></div><div data-line='126' class='line-number'></div><div data-line='127' class='line-number'></div><div data-line='128' class='line-number'></div><div data-line='129' class='line-number'></div><div data-line='130' class='line-number'></div><div data-line='131' class='line-number'></div><div data-line='132' class='line-number'></div><div data-line='133' class='line-number'></div><div data-line='134' class='line-number'></div><div data-line='135' class='line-number'></div><div data-line='136' class='line-number'></div></pre></td><td class='main  nasm'><pre><div class='line'><code><span class="k">bits</span> <span class="mi">16</span>
</code></div><div class='line'><code><span class="k">org</span> <span class="mh">0x7c00</span>
</code></div><div class='line'><code><span class="nl">k_boot_start:</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; The cli instruction disables maskable external interrupts.</span>
</code></div><div class='line'><code>  <span class="nf">cli</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Fetch Control Register 0, set bit 0 to 1 (Protection Enable bit)</span>
</code></div><div class='line'><code>  <span class="c1">; This basically enables 32-bit mode</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">cr0</span>
</code></div><div class='line'><code>  <span class="nf">or</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">1</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">cr0</span><span class="p">,</span> <span class="nb">eax</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Now we have to jump into the 32-bit zone. The 0x08 is a 386-style segment</span>
</code></div><div class='line'><code>  <span class="c1">; descriptor, which theoretically references the Global Descriptor Table,</span>
</code></div><div class='line'><code>  <span class="c1">; though in this bare-bones bootloader we haven&#39;t even bothered to set that</span>
</code></div><div class='line'><code>  <span class="c1">; up yet and it works anyway.</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="mh">0x08</span><span class="p">:</span><span class="nv">k_32_bits</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="k">bits</span> <span class="mi">32</span>
</code></div><div class='line'><code><span class="nl">k_32_bits:</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Now we&#39;re going to set up the page tables for 64-bit mode.</span>
</code></div><div class='line'><code>  <span class="c1">; Since this is a minimal example, we&#39;re just going to set up a single page.</span>
</code></div><div class='line'><code>  <span class="c1">; The 64-bit page table uses four levels of paging,</span>
</code></div><div class='line'><code>  <span class="c1">;    PML4E table =&gt; PDPTE table =&gt; PDE table =&gt; PTE table =&gt; physical addr</span>
</code></div><div class='line'><code>  <span class="c1">; You don&#39;t have to use all of them, but you have to use at least the first</span>
</code></div><div class='line'><code>  <span class="c1">; three. So we&#39;re going to set up PML4E, PDPTE, and PDE tables here, each</span>
</code></div><div class='line'><code>  <span class="c1">; with a single entry.</span>
</code></div><div class='line'><code><span class="cp">%define PML4E_ADDR 0x8000</span>
</code></div><div class='line'><code><span class="cp">%define PDPTE_ADDR 0x9000</span>
</code></div><div class='line'><code><span class="cp">%define PDE_ADDR 0xa000</span>
</code></div><div class='line'><code>  <span class="c1">; Set up PML4 entry, which will point to PDPT entry.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="nb">eax</span><span class="p">,</span> <span class="nv">PDPTE_ADDR</span>
</code></div><div class='line'><code>  <span class="c1">; The low 12 bits of the PML4E entry are zeroed out when it&#39;s dereferenced,</span>
</code></div><div class='line'><code>  <span class="c1">; and used to encode metadata instead. Here we&#39;re setting the Present and</span>
</code></div><div class='line'><code>  <span class="c1">; Read/Write bits. You might also want to set the User bit, if you want a</span>
</code></div><div class='line'><code>  <span class="c1">; page to remain accessible in user-mode code.</span>
</code></div><div class='line'><code>  <span class="nf">or</span> <span class="kt">dword</span> <span class="nb">eax</span><span class="p">,</span> <span class="m">0b</span><span class="mi">011</span>  <span class="c1">; Would be 0b111 to set User bit also</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">PML4E_ADDR</span><span class="p">],</span> <span class="nb">eax</span>
</code></div><div class='line'><code>  <span class="c1">; Although we&#39;re in 32-bit mode, the table entry is 64 bits. We can just zero</span>
</code></div><div class='line'><code>  <span class="c1">; out the upper bits in this case.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">PML4E_ADDR</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="mi">0</span>
</code></div><div class='line'><code>  <span class="c1">; Set up PDPT entry, which will point to PD entry.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="nb">eax</span><span class="p">,</span> <span class="nv">PDE_ADDR</span>
</code></div><div class='line'><code>  <span class="nf">or</span> <span class="kt">dword</span> <span class="nb">eax</span><span class="p">,</span> <span class="m">0b</span><span class="mi">011</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">PDPTE_ADDR</span><span class="p">],</span> <span class="nb">eax</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">PDPTE_ADDR</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="mi">0</span>
</code></div><div class='line'><code>  <span class="c1">; Set up PD entry, which will point to the first 2MB page (0).  But we</span>
</code></div><div class='line'><code>  <span class="c1">; need to set three bits this time, Present, Read/Write and Page Size (to</span>
</code></div><div class='line'><code>  <span class="c1">; indicate that this is the last level of paging in use).</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">PDE_ADDR</span><span class="p">],</span> <span class="m">0b</span><span class="mi">10000011</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="kt">dword</span> <span class="p">[</span><span class="nv">PDE_ADDR</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="mi">0</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Enable PGE and PAE bits of CR4 to get 64-bit paging available.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="m">0b</span><span class="mi">10100000</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">cr4</span><span class="p">,</span> <span class="nb">eax</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Set master (PML4) page table in CR3.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="nv">PML4E_ADDR</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">cr3</span><span class="p">,</span> <span class="nb">eax</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Set IA-32e Mode Enable (read: 64-bit mode enable) in the &quot;model-specific</span>
</code></div><div class='line'><code>  <span class="c1">; register&quot; (MSR) called Extended Features Enable (EFER).</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="mh">0xc0000080</span>
</code></div><div class='line'><code>  <span class="nf">rdmsr</span> <span class="c1">; takes ecx as argument, deposits contents of MSR into eax</span>
</code></div><div class='line'><code>  <span class="nf">or</span> <span class="nb">eax</span><span class="p">,</span> <span class="m">0b</span><span class="mi">100000000</span>
</code></div><div class='line'><code>  <span class="nf">wrmsr</span> <span class="c1">; exactly the reverse of rdmsr</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Enable PG flag of CR0 to actually turn on paging.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">cr0</span>
</code></div><div class='line'><code>  <span class="nf">or</span> <span class="nb">eax</span><span class="p">,</span> <span class="mh">0x80000000</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">cr0</span><span class="p">,</span> <span class="nb">eax</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Load Global Descriptor Table (outdated access control, but needs to be set)</span>
</code></div><div class='line'><code>  <span class="nf">lgdt</span> <span class="p">[</span><span class="nv">gdt_hdr</span><span class="p">]</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="c1">; Jump into 64-bit zone.</span>
</code></div><div class='line'><code>  <span class="nf">jmp</span> <span class="mh">0x08</span><span class="p">:</span><span class="nv">k_64_bits</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="k">bits</span> <span class="mi">64</span>
</code></div><div class='line'><code><span class="nl">k_64_bits:</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="mh">0xb8000</span> <span class="c1">; This is the beginning of &quot;video memory.&quot;</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rdi</span>     <span class="c1">; We&#39;ll save that value for later, too.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rcx</span><span class="p">,</span> <span class="mi">80</span><span class="o">*</span><span class="mi">25</span>   <span class="c1">; This is how many characters are on the screen.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">ax</span><span class="p">,</span> <span class="mh">0x7400</span>   <span class="c1">; Video memory uses 2 bytes per character. The high byte</span>
</code></div><div class='line'><code>                   <span class="c1">; determines foreground and background colors. See also</span>
</code></div><div class='line'><code><span class="c1">; <a href="http://en.wikipedia.org/wiki/List_of_8-bit_computer_hardware_palettes#CGA">http://en.wikipedia.org/wiki/List_of_8-bit_computer_hardware_palettes#CGA</a></span>
</code></div><div class='line'><code>                   <span class="c1">; In this case, we&#39;re setting red-on-gray (MIT colors!)</span>
</code></div><div class='line'><code>  <span class="nf">rep</span> <span class="nv">stosw</span>        <span class="c1">; Copies whatever is in ax to [rdi], rcx times.</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rdx</span>       <span class="c1">; Restore rdi to the beginning of video memory.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nv">hello</span>     <span class="c1">; Point rsi (&quot;source&quot; of string instructions) at string.</span>
</code></div><div class='line'><code>  <span class="nf">mov</span> <span class="nb">rbx</span><span class="p">,</span> <span class="nv">hello_end</span> <span class="c1">; Put end of string in rbx for comparison purposes.</span>
</code></div><div class='line'><code><span class="nl">hello_loop:</span>
</code></div><div class='line'><code>  <span class="nf">movsb</span>              <span class="c1">; Moves a byte from [rsi] to [rdi], increments rsi and rdi.</span>
</code></div><div class='line'><code>  <span class="nf">inc</span> <span class="nb">rdi</span>            <span class="c1">; Increment rdi again to skip over the color-control byte.</span>
</code></div><div class='line'><code>  <span class="nf">cmp</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nb">rbx</span>       <span class="c1">; Check if we&#39;ve reached the end of the string.</span>
</code></div><div class='line'><code>  <span class="nf">jne</span> <span class="nv">hello_loop</span>     <span class="c1">; If not, loop.</span>
</code></div><div class='line'><code>  <span class="nf">hlt</span>                <span class="c1">; If so, halt.</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nl">hello:</span>
</code></div><div class='line'><code>  <span class="kd">db</span> <span class="s">&quot;Hello, kernel!&quot;</span>
</code></div><div class='line'><code><span class="nl">hello_end:</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="c1">; Global descriptor table entry format</span>
</code></div><div class='line'><code><span class="c1">; See Intel 64 Software Developers&#39; Manual, Vol. 3A, Figure 3-8</span>
</code></div><div class='line'><code><span class="c1">; or <a href="http://en.wikipedia.org/wiki/Global_Descriptor_Table">http://en.wikipedia.org/wiki/Global_Descriptor_Table</a></span>
</code></div><div class='line'><code><span class="cp">%macro GDT_ENTRY 4</span>
</code></div><div class='line'><code>  <span class="c1">; %1 is base address, %2 is segment limit, %3 is flags, %4 is type.</span>
</code></div><div class='line'><code>  <span class="kd">dw</span> <span class="o">%</span><span class="mi">2</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
</code></div><div class='line'><code>  <span class="kd">dw</span> <span class="o">%</span><span class="mi">1</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
</code></div><div class='line'><code>  <span class="kd">db</span> <span class="p">(</span><span class="o">%</span><span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</code></div><div class='line'><code>  <span class="kd">db</span> <span class="o">%</span><span class="mi">4</span> <span class="o">|</span> <span class="p">((</span><span class="o">%</span><span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xf0</span><span class="p">)</span>
</code></div><div class='line'><code>  <span class="kd">db</span> <span class="p">(</span><span class="o">%</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="mh">0xf0</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="o">%</span><span class="mi">2</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0f</span><span class="p">)</span>
</code></div><div class='line'><code>  <span class="kd">db</span> <span class="o">%</span><span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span>
</code></div><div class='line'><code><span class="cp">%endmacro</span>
</code></div><div class='line'><code><span class="cp">%define EXECUTE_READ 0b1010</span>
</code></div><div class='line'><code><span class="cp">%define READ_WRITE 0b0010</span>
</code></div><div class='line'><code><span class="cp">%define RING0 0b10101001 </span><span class="c1">; Flags set: Granularity, 64-bit, Present, S; Ring=00</span>
</code></div><div class='line'><code>                   <span class="c1">; Note: Ring is determined by bits 1 and 2 (the only &quot;00&quot;)</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="c1">; Global descriptor table (loaded by lgdt instruction)</span>
</code></div><div class='line'><code><span class="nl">gdt_hdr:</span>
</code></div><div class='line'><code>  <span class="kd">dw</span> <span class="nv">gdt_end</span> <span class="o">&ndash;</span> <span class="nv">gdt</span> <span class="o">&ndash;</span> <span class="mi">1</span>
</code></div><div class='line'><code>  <span class="kd">dd</span> <span class="nv">gdt</span>
</code></div><div class='line'><code><span class="nl">gdt:</span>
</code></div><div class='line'><code>  <span class="nf">GDT_ENTRY</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</code></div><div class='line'><code>  <span class="nf">GDT_ENTRY</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffff</span><span class="p">,</span> <span class="nv">RING0</span><span class="p">,</span> <span class="nv">EXECUTE_READ</span>
</code></div><div class='line'><code>  <span class="nf">GDT_ENTRY</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffff</span><span class="p">,</span> <span class="nv">RING0</span><span class="p">,</span> <span class="nv">READ_WRITE</span>
</code></div><div class='line'><code>  <span class="c1">; You&#39;d want to have entries for other rings here, if you were using them.</span>
</code></div><div class='line'><code><span class="nl">gdt_end:</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="c1">; Very important &ndash; mark the sector as bootable. </span>
</code></div><div class='line'><code><span class="kd">times</span> <span class="mi">512</span> <span class="o">&ndash;</span> <span class="mi">2</span> <span class="o">&ndash;</span> <span class="p">(</span><span class="kc">$</span> <span class="o">&ndash;</span> <span class="kc">$$</span><span class="p">)</span> <span class="nv">db</span> <span class="mi">0</span> <span class="c1">; zero-pad the 512-byte sector to the last 2 bytes</span>
</code></div><div class='line'><code><span class="kd">dw</span> <span class="mh">0xaa55</span> <span class="c1">; Magic &quot;boot signature&quot;</span>
</code></div></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Workflow]]></title>
    <link href="http://davidad.github.io/blog/2014/02/11/octopress-workflow/"/>
    <updated>2014-02-11T18:10:58-05:00</updated>
    <id>http://davidad.github.io/blog/2014/02/11/octopress-workflow</id>
    <content type="html"><![CDATA[<p>Today is my second day at <a href="http://hackerschool.com">Hacker School</a>, and I
decided to set up a little bit of tooling for blogging about what I do here.
The first tool I set up (following the recommendations of many Hacker Schoolers
and alums) was <a href="http://octopress.org">Octopress</a>, a static site generator
designed for <a href="pages.github.com">GitHub Pages</a> and implemented atop
<a href="http://jekyllrb.com">Jekyll</a>. (The page you&rsquo;re reading right now is
Octopress-generated.) I followed the admirably thorough Octopress documentation
for <a href="http://octopress.org/docs/setup/">installation</a>, <a href="http://octopress.org/docs/configuring/">initial
configuration</a>, <a href="http://octopress.org/docs/deploying/github/">deployment with Github
Pages</a>, and <a href="http://octopress.org/docs/theme/">theme
customization</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. But I wanted even more
convenience. So, I&rsquo;m here to introduce you to the <code>blog</code> command (the same one
I used to write this very post).</p>

<pre><code>davidad@zayin ~/octopress&gt; blog
Enter a title for your post:
</code></pre>

<p><code>blog</code> is a <code>bash</code> script, pretty specific to my own setup (vim, chrome, OSX),
but it could be adapted to other environments. <!-- more --> <code>blog</code> can create a
post using Octopress' <code>new_post[]</code> Rake target (and you can specify a title on
the command line if you want), then it opens <code>vim</code> in sort of <code>git commit</code>-ish
fashion, with your cursor on the last line ready to press <code>o</code> and start typing
your post, and with magical deployment when you <code>:wq</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. It also implements
<code>blog deploy</code> (runs both generate and deploy), <code>blog delete</code>, and editing
existing posts. Most importantly, whenever editing the script sets up a
keybinding for <code>C-g</code> that saves your draft post and refreshes the local preview
in a Chrome window. It does this even if you don&rsquo;t have a tab open to refresh,
but it also won&rsquo;t open a new one if you do. And it keeps your <code>vim</code> window in
the foreground. How does this work?  You might expect that Chrome has a nice
command-line remote interface for exactly this sort of thing. Sadly, that is not
the case. However, Apple has had the foresight to allow command-driven
automation of actions which can typically only be carried out graphically.
Sadly again, that mechanism is
<a href="http://en.wikipedia.org/wiki/AppleScript"><strong>AppleScript</strong></a>, a historical relic
of a programming language.</p>

<p><figure class='code'><figcaption>Reloading a website in Chrome from AppleScript</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div></pre></td><td class='main  applescript'><pre><div class='line'><code><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Google Chrome&quot;</span>
</code></div><div class='line'><code>    <span class="k">if</span> <span class="p">(</span><span class="nb">count</span> <span class="nb">every</span> <span class="na">window</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
</code></div><div class='line'><code>        <span class="nb">make</span> <span class="nb">new</span> <span class="na">window</span>
</code></div><div class='line'><code>    <span class="k">end</span> <span class="k">if</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>    <span class="k">set</span> <span class="nv">found</span> <span class="k">to</span> <span class="no">false</span>
</code></div><div class='line'><code>    <span class="k">set</span> <span class="nv">theTabIndex</span> <span class="k">to</span> <span class="o">&ndash;</span><span class="mi">1</span>
</code></div><div class='line'><code>    <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">theWindow</span> <span class="k">in</span> <span class="nb">every</span> <span class="na">window</span>
</code></div><div class='line'><code>        <span class="k">set</span> <span class="nv">theTabIndex</span> <span class="k">to</span> <span class="mi">0</span>
</code></div><div class='line'><code>        <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">theTab</span> <span class="k">in</span> <span class="nb">every</span> <span class="no">tab</span> <span class="k">of</span> <span class="nv">theWindow</span>
</code></div><div class='line'><code>            <span class="k">set</span> <span class="nv">theTabIndex</span> <span class="k">to</span> <span class="nv">theTabIndex</span> <span class="o">+</span> <span class="mi">1</span>
</code></div><div class='line'><code>            <span class="k">if</span> <span class="nv">theTab</span>&#39;s <span class="nv">URL</span> <span class="ow">contains</span> <span class="s2">&quot;$1&quot;</span> <span class="k">then</span>
</code></div><div class='line'><code>                <span class="k">set</span> <span class="nv">found</span> <span class="k">to</span> <span class="no">true</span>
</code></div><div class='line'><code>                <span class="k">exit</span>
</code></div><div class='line'><code>            <span class="k">end</span> <span class="k">if</span>
</code></div><div class='line'><code>        <span class="k">end</span> <span class="k">repeat</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>        <span class="k">if</span> <span class="nv">found</span> <span class="k">then</span>
</code></div><div class='line'><code>            <span class="k">exit</span> <span class="k">repeat</span>
</code></div><div class='line'><code>        <span class="k">end</span> <span class="k">if</span>
</code></div><div class='line'><code>    <span class="k">end</span> <span class="k">repeat</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>    <span class="k">if</span> <span class="nv">found</span> <span class="k">then</span>
</code></div><div class='line'><code>        <span class="k">tell</span> <span class="nv">theTab</span> <span class="k">to</span> <span class="nv">reload</span>
</code></div><div class='line'><code>        <span class="err">$</span><span class="nv">L1</span>
</code></div><div class='line'><code>    <span class="k">else</span>
</code></div><div class='line'><code>        <span class="err">$</span><span class="nv">L2</span>
</code></div><div class='line'><code>    <span class="k">end</span> <span class="k">if</span>
</code></div><div class='line'><code><span class="k">end</span> <span class="k">tell</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>In this snippet, <code>$1</code> is going to get replaced with the site&rsquo;s top-level URL
(like <code>http://localhost:4000/</code> for the local preview server, or
<code>http://davidad.github.io/</code> for the deployment). <code>$L1</code> and <code>$L2</code> are
placeholders for two actions that we might not always <nobr>want<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>:</nobr>
changing the current tab to the tab we just refreshed, and opening up a new tab
if there wasn&rsquo;t already one for this site. It&rsquo;s also worth noting that this
script will reload the first tab that  <em>contains</em> the URL &mdash; so if you have an
open tab pointed at a particular page on the site, you won&rsquo;t lose your
place<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>The interface to AppleScript is the <code>osascript</code> command, which accepts an
AppleScript file as its argument<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. So, the first big chunk of the <code>blog</code>
script is dedicated to producing script files. It&rsquo;s implemented as a function
which fills in the &ldquo;holes&rdquo; in the script described above.</p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div><div data-line='36' class='line-number'></div><div data-line='37' class='line-number'></div><div data-line='38' class='line-number'></div><div data-line='39' class='line-number'></div><div data-line='40' class='line-number'></div><div data-line='41' class='line-number'></div><div data-line='42' class='line-number'></div><div data-line='43' class='line-number'></div><div data-line='44' class='line-number'></div><div data-line='45' class='line-number'></div><div data-line='46' class='line-number'></div><div data-line='47' class='line-number'></div><div data-line='48' class='line-number'></div><div data-line='49' class='line-number'></div><div data-line='50' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code><span class="k">function </span>wrs<span class="o">()</span> <span class="o">{</span>
</code></div><div class='line'><code>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$2</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></div><div class='line'><code><span class="k">        </span><span class="nv">L1</span><span class="o">=</span><span class="s2">&quot;set theWindow&#39;s active tab index to theTabIndex&quot;</span>
</code></div><div class='line'><code>        <span class="nv">L2</span><span class="o">=</span><span class="s2">&quot;tell window 1 to make new tab with properties {URL:&#92;&quot;$1&#92;&quot;}&quot;</span>
</code></div><div class='line'><code>    <span class="k">else</span>
</code></div><div class='line'><code><span class="k">        </span><span class="nv">L1</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</code></div><div class='line'><code>        <span class="nv">L2</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</code></div><div class='line'><code>    <span class="k">fi</span>
</code></div><div class='line'><code><span class="k">    </span>cat &gt;.reload.scpt <span class="s">&lt;&lt;EOF</span>
</code></div><div class='line'><code><span class="s">delay 1.5</span>
</code></div><div class='line'><code><span class="s">tell application &quot;Google Chrome&quot;</span>
</code></div><div class='line'><code><span class="s">    </span>
</code></div><div class='line'><code><span class="s">    if (count every window) = 0 then</span>
</code></div><div class='line'><code><span class="s">        make new window</span>
</code></div><div class='line'><code><span class="s">    end if</span>
</code></div><div class='line'><code><span class="s">    </span>
</code></div><div class='line'><code><span class="s">    set found to false</span>
</code></div><div class='line'><code><span class="s">    set theTabIndex to -1</span>
</code></div><div class='line'><code><span class="s">    repeat with theWindow in every window</span>
</code></div><div class='line'><code><span class="s">        set theTabIndex to 0</span>
</code></div><div class='line'><code><span class="s">        repeat with theTab in every tab of theWindow</span>
</code></div><div class='line'><code><span class="s">            set theTabIndex to theTabIndex + 1</span>
</code></div><div class='line'><code><span class="s">            if theTab&#39;s URL contains &quot;$1&quot; then</span>
</code></div><div class='line'><code><span class="s">                set found to true</span>
</code></div><div class='line'><code><span class="s">                exit</span>
</code></div><div class='line'><code><span class="s">            end if</span>
</code></div><div class='line'><code><span class="s">        end repeat</span>
</code></div><div class='line'><code><span class="s">        </span>
</code></div><div class='line'><code><span class="s">        if found then</span>
</code></div><div class='line'><code><span class="s">            exit repeat</span>
</code></div><div class='line'><code><span class="s">        end if</span>
</code></div><div class='line'><code><span class="s">    end repeat</span>
</code></div><div class='line'><code><span class="s">    </span>
</code></div><div class='line'><code><span class="s">    if found then</span>
</code></div><div class='line'><code><span class="s">        tell theTab to reload</span>
</code></div><div class='line'><code><span class="s">        $L1</span>
</code></div><div class='line'><code><span class="s">    else</span>
</code></div><div class='line'><code><span class="s">        $L2</span>
</code></div><div class='line'><code><span class="s">    end if</span>
</code></div><div class='line'><code><span class="s">end tell</span>
</code></div><div class='line'><code><span class="s">EOF</span>
</code></div><div class='line'><code><span class="o">}</span>
</code></div><div class='line'><code>wrs <span class="s1">&#39;<a href="http://localhost:4000/">http://localhost:4000/</a>&#39;</span> y
</code></div></pre></td></tr></table></div></figure></p>

<p>The <code>delay 1.5</code> line exists to give Octopress enough time to do its thing before
trying to reload Chrome. Octopress is pretty slow.</p>

<p>In the next chunk, we handle the <code>delete</code> and <code>deploy</code> actions:</p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code><span class="nv">ORIGDIR</span><span class="o">=</span><span class="sb">&#x60;</span><span class="nb">pwd</span> <span class="p">|</span> sed <span class="s1">&#39;s/&#92; /&#92;&#92; /g&#39;</span><span class="sb">&#x60;</span>
</code></div><div class='line'><code><span class="nb">cd</span> ~/octopress
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nv">URL</span><span class="o">=</span><span class="s2">&quot;<a href="http://davidad.github.io/">http://davidad.github.io/</a>&quot;</span>
</code></div></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='53' class='line-number'></div><div data-line='54' class='line-number'></div><div data-line='55' class='line-number'></div><div data-line='56' class='line-number'></div><div data-line='57' class='line-number'></div><div data-line='58' class='line-number'></div><div data-line='59' class='line-number'></div><div data-line='60' class='line-number'></div><div data-line='61' class='line-number'></div><div data-line='62' class='line-number'></div><div data-line='63' class='line-number'></div><div data-line='64' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code><span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> delete <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></div><div class='line'><code>    <span class="o">[[</span> -f <span class="nv">$2</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> rm -i <span class="nv">$2</span> <span class="o">&amp;&amp;</span> bundle <span class="nb">exec </span>rake generate <span class="o">&amp;&amp;</span> <span class="nb">exec</span> <span class="nv">$0</span> deploy
</code></div><div class='line'><code>    <span class="nb">exit </span>0
</code></div><div class='line'><code><span class="k">elif</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> deploy <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></div><div class='line'><code><span class="k">    </span>bundle <span class="nb">exec </span>rake deploy <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> wrs <span class="nv">$URL</span> y <span class="o">&amp;&amp;</span> sleep 5 <span class="o">&amp;&amp;</span> osascript ./.reload.scpt <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> rm -f ./.reload.scpt .timeref rake_preview.log <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git add . <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;Site updated at &#x60;date -u +&quot;</span>%Y-%m-%d %H:%M:%S UTC<span class="s2">&quot;&#x60;&quot;</span> <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git push
</code></div><div class='line'><code>    <span class="nb">exit </span>0
</code></div><div class='line'><code><span class="k">fi</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>In the case of <code>delete</code>, we use <code>rm -i</code> to ask the user to confirm the deletion,
and if they do, we generate and then call the script itself (<code>$0</code>) with the
deploy action (so as not to duplicate code). The deploy action deploys the
generated site (to GitHub Pages), writes out a refresh script for the deployed
site, waits an extra few seconds for GitHub Pages to do its thing, and then runs
the reload script. Finally,<code>blog</code> commits and pushes the <code>source</code> branch of the
repository, after cleaning up its temporary files &mdash; the reload script, the log
from Octopress' local preview server, and the time reference (which we&rsquo;ll come
to shortly).</p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='66' class='line-number'></div><div data-line='67' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code><span class="o">[[</span> -f <span class="nv">$1</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> rm -f new_post.md <span class="o">&amp;&amp;</span> ln -s <span class="nv">$1</span> new_post.md
</code></div><div class='line'><code><span class="o">[[</span> -f <span class="nv">$1</span> <span class="o">]]</span> <span class="o">||</span> bundle <span class="nb">exec </span>rake <span class="s2">&quot;new_post[$1]&quot;</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>We&rsquo;re managing a symbolic link called <code>new_post.md</code> here, which is what we&rsquo;re
going to call <code>vim</code> on. If a filename is specified, we point the link directly
at that file. Otherwise, we&rsquo;re going to call <code>rake</code> to set up the file. By
default, <code>rake</code> won&rsquo;t give any indication to our script of what file it made, so
we&rsquo;re going to make a tweak to the <code>Rakefile</code>:</p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div></pre></td><td class='main  diff'><pre><div class='line'><code><span class="gu">@@ -104,9 +89,7 @@ task :new_post, :title do |t, args|</span>
</code></div><div class='line'><code>   raise &quot;### You haven&#39;t set anything up yet. First run &#x60;rake install&#x60; to set up an Octopress theme.&quot; unless File.directory?(source_dir)
</code></div><div class='line'><code>   mkdir_p &quot;#{source_dir}/#{posts_dir}&quot;
</code></div><div class='line'><code>   filename = &quot;#{source_dir}/#{posts_dir}/#{Time.now.strftime(&#39;%Y-%m-%d&#39;)}&ndash;#{title.to_url}.#{new_post_ext}&quot;
</code></div><div class='line'><code><span class="gd">&ndash;  if File.exist?(filename)</span>
</code></div><div class='line'><code><span class="gd">&ndash;    abort(&quot;rake aborted!&quot;) if ask(&quot;#{filename} already exists. Do you want to overwrite?&quot;, [&#39;y&#39;, &#39;n&#39;]) == &#39;n&#39;</span>
</code></div><div class='line'><code><span class="gd">&ndash;  end</span>
</code></div><div class='line'><code><span class="gi">+  if not (File.exist?(filename) and ask(&quot;#{filename} already exists. Do you want to overwrite?&quot;, [&#39;y&#39;, &#39;n&#39;]) == &#39;n&#39;)</span>
</code></div><div class='line'><code>     puts &quot;Creating new post: #{filename}&quot;
</code></div><div class='line'><code>     open(filename, &#39;w&#39;) do |post|
</code></div><div class='line'><code>       post.puts &quot;&mdash;&ndash;&quot;
</code></div><div class='line'><code>       post.puts &quot;layout: post&quot;
</code></div><div class='line'><code>       post.puts &quot;title: &#92;&quot;#{title.gsub(/&amp;/,&#39;&amp;amp;&#39;)}&#92;&quot;&quot;
</code></div><div class='line'><code>       post.puts &quot;date: #{Time.now.strftime(&#39;%Y-%m-%d %H:%M:%S %z&#39;)}&quot;
</code></div><div class='line'><code>       post.puts &quot;comments: true&quot;
</code></div><div class='line'><code>       post.puts &quot;categories: &quot;
</code></div><div class='line'><code>       post.puts &quot;&mdash;&ndash;&quot;
</code></div><div class='line'><code>     end
</code></div><div class='line'><code><span class="gi">+  end</span>
</code></div><div class='line'><code><span class="gi">+  system &quot;rm -f new_post.md&quot;</span>
</code></div><div class='line'><code><span class="gi">+  system &quot;ln -s #{filename} new_post.md&quot;</span>
</code></div><div class='line'><code> end
</code></div></pre></td></tr></table></div></figure></p>

<p>The first changeset handles the case where I don&rsquo;t want to overwrite the
existing post, but I <em>do</em> want to proceed to edit it (and deploy the edits).
The last two lines simply point <code>new_post.md</code> at the right spot so our script
can call <code>vim</code> on it.  Before we call vim, though, we have to set up the
deploy-on-save feature and the live(ish)-preview feature&hellip;</p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='69' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code>touch -m .timeref
</code></div></pre></td></tr></table></div></figure></p>

<p><code>.timeref</code> is an empty file which keeps track of the time slightly before vim
was launched. In a &ldquo;successful&rdquo; session, the modification time of the post file
should be newer than <code>.timeref</code>, whereas if you <code>:q!</code> immediately, it won&rsquo;t be.
Now, it&rsquo;s worth pointing out that the live-preview requires saving along the
way, so <strong>if you want to abort after previewing, use <code>:cq</code></strong>, <code>vim</code>&rsquo;s command
for exiting with a nonzero status code (so the shell script knows what&rsquo;s up).
The script supports both mechanisms, so that if you are aborting immediately
but forget to <code>:cq</code>, The Right Thing should happen.</p>

<p><figure class='code'><figcaption>manage preview processes </figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='70' class='line-number'></div><div data-line='71' class='line-number'></div><div data-line='72' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code>ps x <span class="p">|</span> egrep <span class="s1">&#39;rake|rackup|jekyll|sass|compass&#39;</span> <span class="p">|</span> grep -v grep <span class="p">|</span> awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span> xargs <span class="nb">kill</span>
</code></div><div class='line'><code>ps x <span class="p">|</span> egrep <span class="s1">&#39;rackup&#39;</span> <span class="p">|</span> grep -v grep <span class="p">|</span> awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span> xargs <span class="nb">kill</span> -9
</code></div><div class='line'><code>bundle <span class="nb">exec </span>rake preview &gt; rake_preview.log 2&gt;<span class="p">&amp;</span>1 <span class="p">&amp;</span>
</code></div></pre></td></tr></table></div></figure></p>

<p>Now we&rsquo;re going to kill off any existing preview processes (they really start
to pile up otherwise!) and launch a new one. We also log its <code>stdout</code> and
<code>stderr</code> so you can see what the preview process is up to if you want (<code>tail -f
rake_preview.log</code>).</p>

<p><figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='73' class='line-number'></div><div data-line='74' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code>sleep 0.3
</code></div><div class='line'><code>osascript ./.reload.scpt
</code></div></pre></td></tr></table></div></figure></p>

<p>We give the preview process a little time to get started and then display the
preview in the browser so the user knows what they&rsquo;re working from.</p>

<p><figure class='code'><figcaption>Run vim </figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='76' class='line-number'></div><div data-line='77' class='line-number'></div><div data-line='78' class='line-number'></div><div data-line='79' class='line-number'></div><div data-line='80' class='line-number'></div><div data-line='81' class='line-number'></div><div data-line='82' class='line-number'></div><div data-line='83' class='line-number'></div><div data-line='84' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code>vim -c <span class="s1">&#39;set tw=80&#39;</span> -c <span class="s1">&#39;map &lt;C-G&gt; :w&lt;CR&gt;:!osascript ./.reload.scpt&lt;CR&gt;&lt;CR&gt;&#39;</span> <span class="se">&#92;</span>
</code></div><div class='line'><code>    -c <span class="s2">&quot;cd $ORIGDIR&quot;</span> + new_post.md
</code></div><div class='line'><code><span class="nv">VIM_STATUS</span><span class="o">=</span><span class="nv">$?</span>
</code></div><div class='line'><code><span class="o">[[</span> <span class="sb">&#x60;</span>readlink new_post.md<span class="sb">&#x60;</span> -nt .timeref <span class="o">]]</span> <span class="o">||</span> <span class="nv">VIM_STATUS</span><span class="o">=</span>1
</code></div><div class='line'><code><span class="o">[</span> <span class="nv">$VIM_STATUS</span> -eq 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> osascript ./.reload.scpt <span class="o">&amp;&amp;</span> <span class="nb">exec</span> <span class="nv">$0</span> deploy <span class="o">&amp;&amp;</span> <span class="nb">exit </span>0
</code></div><div class='line'><code><span class="o">[</span> <span class="nv">$VIM_STATUS</span> -ne 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> wrs <span class="s1">&#39;<a href="http://localhost:4000/">http://localhost:4000/</a>&#39;</span> n <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> <span class="o">[</span> -f new_post.md <span class="o">]</span> <span class="o">&amp;&amp;</span> rm -i <span class="sb">&#x60;</span>readlink new_post.md<span class="sb">&#x60;</span> <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git rm &mdash;ignore-unmatch new_post.md <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> sleep 0.4 <span class="o">&amp;&amp;</span> osascript ./.reload.scpt
</code></div></pre></td></tr></table></div></figure></p>

<p>This is the last piece of the script, where we actually run <code>vim</code> and then take
the appropriate action after it exits. We&rsquo;re giving <code>vim</code> a number of commands
on the command line, including setting auto-wrapping at 80 columns (<code>tw=80</code>),
scrolling to the bottom of the file (<code>+</code>), and changing to the directory the
script was run from (set all the way back on line 3). Most importantly, we&rsquo;re
forcing a normal-mode mapping of <code>C-g</code> to the reload script!</p>

<p>Once <code>vim</code> exits, we capture its return code with <code>$?</code>. Then we check if the
file has actually been saved. Either it has, <em>or</em> (<code>||</code>) the status really ought
to be nonzero. If the status is still <code>0</code>, then we do one final preview and
shift into deploy mode. Otherwise, we remove the file that <code>new_post.md</code> points to, remove <code>new_post.md</code> itself, and reload<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<h3>Putting it all together</h3>

<p><figure class='code'><figcaption>/usr/bin/blog<a href='https://gist.github.com/davidad/8981964'>gist</a></figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div><div data-line='36' class='line-number'></div><div data-line='37' class='line-number'></div><div data-line='38' class='line-number'></div><div data-line='39' class='line-number'></div><div data-line='40' class='line-number'></div><div data-line='41' class='line-number'></div><div data-line='42' class='line-number'></div><div data-line='43' class='line-number'></div><div data-line='44' class='line-number'></div><div data-line='45' class='line-number'></div><div data-line='46' class='line-number'></div><div data-line='47' class='line-number'></div><div data-line='48' class='line-number'></div><div data-line='49' class='line-number'></div><div data-line='50' class='line-number'></div><div data-line='51' class='line-number'></div><div data-line='52' class='line-number'></div><div data-line='53' class='line-number'></div><div data-line='54' class='line-number'></div><div data-line='55' class='line-number'></div><div data-line='56' class='line-number'></div><div data-line='57' class='line-number'></div><div data-line='58' class='line-number'></div><div data-line='59' class='line-number'></div><div data-line='60' class='line-number'></div><div data-line='61' class='line-number'></div><div data-line='62' class='line-number'></div><div data-line='63' class='line-number'></div><div data-line='64' class='line-number'></div><div data-line='65' class='line-number'></div><div data-line='66' class='line-number'></div><div data-line='67' class='line-number'></div><div data-line='68' class='line-number'></div><div data-line='69' class='line-number'></div><div data-line='70' class='line-number'></div><div data-line='71' class='line-number'></div><div data-line='72' class='line-number'></div><div data-line='73' class='line-number'></div><div data-line='74' class='line-number'></div><div data-line='75' class='line-number'></div><div data-line='76' class='line-number'></div><div data-line='77' class='line-number'></div><div data-line='78' class='line-number'></div><div data-line='79' class='line-number'></div><div data-line='80' class='line-number'></div><div data-line='81' class='line-number'></div><div data-line='82' class='line-number'></div><div data-line='83' class='line-number'></div><div data-line='84' class='line-number'></div><div data-line='85' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><code><span class="c">#!/bin/bash</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nv">ORIGDIR</span><span class="o">=</span><span class="sb">&#x60;</span><span class="nb">pwd</span> <span class="p">|</span> sed <span class="s1">&#39;s/&#92; /&#92;&#92; /g&#39;</span><span class="sb">&#x60;</span>
</code></div><div class='line'><code><span class="nb">cd</span> ~/octopress
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="nv">URL</span><span class="o">=</span><span class="s2">&quot;<a href="http://davidad.github.io/">http://davidad.github.io/</a>&quot;</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="k">function </span>wrs<span class="o">()</span> <span class="o">{</span>
</code></div><div class='line'><code>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$2</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></div><div class='line'><code><span class="k">        </span><span class="nv">L1</span><span class="o">=</span><span class="s2">&quot;set theWindow&#39;s active tab index to theTabIndex&quot;</span>
</code></div><div class='line'><code>        <span class="nv">L2</span><span class="o">=</span><span class="s2">&quot;tell window 1 to make new tab with properties {URL:&#92;&quot;$1&#92;&quot;}&quot;</span>
</code></div><div class='line'><code>    <span class="k">else</span>
</code></div><div class='line'><code><span class="k">        </span><span class="nv">L1</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</code></div><div class='line'><code>        <span class="nv">L2</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</code></div><div class='line'><code>    <span class="k">fi</span>
</code></div><div class='line'><code><span class="k">    </span>cat &gt;.reload.scpt <span class="s">&lt;&lt;EOF</span>
</code></div><div class='line'><code><span class="s">delay 1.5</span>
</code></div><div class='line'><code><span class="s">tell application &quot;Google Chrome&quot;</span>
</code></div><div class='line'><code><span class="s">    </span>
</code></div><div class='line'><code><span class="s">    if (count every window) = 0 then</span>
</code></div><div class='line'><code><span class="s">        make new window</span>
</code></div><div class='line'><code><span class="s">    end if</span>
</code></div><div class='line'><code><span class="s">    </span>
</code></div><div class='line'><code><span class="s">    set found to false</span>
</code></div><div class='line'><code><span class="s">    set theTabIndex to -1</span>
</code></div><div class='line'><code><span class="s">    repeat with theWindow in every window</span>
</code></div><div class='line'><code><span class="s">        set theTabIndex to 0</span>
</code></div><div class='line'><code><span class="s">        repeat with theTab in every tab of theWindow</span>
</code></div><div class='line'><code><span class="s">            set theTabIndex to theTabIndex + 1</span>
</code></div><div class='line'><code><span class="s">            if theTab&#39;s URL contains &quot;$1&quot; then</span>
</code></div><div class='line'><code><span class="s">                set found to true</span>
</code></div><div class='line'><code><span class="s">                exit</span>
</code></div><div class='line'><code><span class="s">            end if</span>
</code></div><div class='line'><code><span class="s">        end repeat</span>
</code></div><div class='line'><code><span class="s">        </span>
</code></div><div class='line'><code><span class="s">        if found then</span>
</code></div><div class='line'><code><span class="s">            exit repeat</span>
</code></div><div class='line'><code><span class="s">        end if</span>
</code></div><div class='line'><code><span class="s">    end repeat</span>
</code></div><div class='line'><code><span class="s">    </span>
</code></div><div class='line'><code><span class="s">    if found then</span>
</code></div><div class='line'><code><span class="s">        tell theTab to reload</span>
</code></div><div class='line'><code><span class="s">        $L1</span>
</code></div><div class='line'><code><span class="s">    else</span>
</code></div><div class='line'><code><span class="s">        $L2</span>
</code></div><div class='line'><code><span class="s">    end if</span>
</code></div><div class='line'><code><span class="s">end tell</span>
</code></div><div class='line'><code><span class="s">EOF</span>
</code></div><div class='line'><code><span class="o">}</span>
</code></div><div class='line'><code>wrs <span class="s1">&#39;<a href="http://localhost:4000/">http://localhost:4000/</a>&#39;</span> y
</code></div><div class='line'><code> </code></div><div class='line'><code> </code></div><div class='line'><code><span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> delete <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></div><div class='line'><code>    <span class="o">[[</span> -f <span class="nv">$2</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> rm -i <span class="nv">$2</span> <span class="o">&amp;&amp;</span> bundle <span class="nb">exec </span>rake generate <span class="o">&amp;&amp;</span> <span class="nb">exec</span> <span class="nv">$0</span> deploy
</code></div><div class='line'><code>    <span class="nb">exit </span>0
</code></div><div class='line'><code><span class="k">elif</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> deploy <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</code></div><div class='line'><code><span class="k">    </span>bundle <span class="nb">exec </span>rake deploy <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> wrs <span class="nv">$URL</span> y <span class="o">&amp;&amp;</span> sleep 5 <span class="o">&amp;&amp;</span> osascript ./.reload.scpt <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> rm -f ./.reload.scpt .timeref rake_preview.log <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git add . <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;Site updated at &#x60;date -u +&quot;</span>%Y-%m-%d %H:%M:%S UTC<span class="s2">&quot;&#x60;&quot;</span> <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git push
</code></div><div class='line'><code>    <span class="nb">exit </span>0
</code></div><div class='line'><code><span class="k">fi</span>
</code></div><div class='line'><code> </code></div><div class='line'><code><span class="o">[[</span> -f <span class="nv">$1</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> rm -f new_post.md <span class="o">&amp;&amp;</span> ln -s <span class="nv">$1</span> new_post.md
</code></div><div class='line'><code><span class="o">[[</span> -f <span class="nv">$1</span> <span class="o">]]</span> <span class="o">||</span> bundle <span class="nb">exec </span>rake <span class="s2">&quot;new_post[$1]&quot;</span>
</code></div><div class='line'><code> </code></div><div class='line'><code>touch -m .timeref
</code></div><div class='line'><code>ps x <span class="p">|</span> egrep <span class="s1">&#39;rake|rackup|jekyll|sass|compass&#39;</span> <span class="p">|</span> grep -v grep <span class="p">|</span> awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span> xargs <span class="nb">kill</span>
</code></div><div class='line'><code>ps x <span class="p">|</span> egrep <span class="s1">&#39;rackup&#39;</span> <span class="p">|</span> grep -v grep <span class="p">|</span> awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span> xargs <span class="nb">kill</span> -9
</code></div><div class='line'><code>sleep 0.15
</code></div><div class='line'><code>bundle <span class="nb">exec </span>rake preview &lt; /dev/zero &gt; rake_preview.log 2&gt;<span class="p">&amp;</span>1 <span class="p">&amp;</span>
</code></div><div class='line'><code>sleep 0.3
</code></div><div class='line'><code>osascript ./.reload.scpt
</code></div><div class='line'><code> </code></div><div class='line'><code>vim -c <span class="s1">&#39;set tw=80&#39;</span> -c <span class="s1">&#39;map &lt;C-G&gt; :w&lt;CR&gt;:!osascript ./.reload.scpt&lt;CR&gt;&lt;CR&gt;&#39;</span> <span class="se">&#92;</span>
</code></div><div class='line'><code>    -c <span class="s2">&quot;cd $ORIGDIR&quot;</span> + new_post.md
</code></div><div class='line'><code><span class="nv">VIM_STATUS</span><span class="o">=</span><span class="nv">$?</span>
</code></div><div class='line'><code><span class="o">[[</span> <span class="sb">&#x60;</span>readlink new_post.md<span class="sb">&#x60;</span> -nt .timeref <span class="o">]]</span> <span class="o">||</span> <span class="nv">VIM_STATUS</span><span class="o">=</span>1
</code></div><div class='line'><code><span class="o">[</span> <span class="nv">$VIM_STATUS</span> -eq 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> osascript ./.reload.scpt <span class="o">&amp;&amp;</span> <span class="nb">exec</span> <span class="nv">$0</span> deploy <span class="o">&amp;&amp;</span> <span class="nb">exit </span>0
</code></div><div class='line'><code><span class="o">[</span> <span class="nv">$VIM_STATUS</span> -ne 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> wrs <span class="s1">&#39;<a href="http://localhost:4000/">http://localhost:4000/</a>&#39;</span> n <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> <span class="o">[</span> -f new_post.md <span class="o">]</span> <span class="o">&amp;&amp;</span> rm -i <span class="sb">&#x60;</span>readlink new_post.md<span class="sb">&#x60;</span> <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> git rm &mdash;ignore-unmatch new_post.md <span class="se">&#92;</span>
</code></div><div class='line'><code>    <span class="o">&amp;&amp;</span> sleep 0.4 <span class="o">&amp;&amp;</span> osascript ./.reload.scpt
</code></div></pre></td></tr></table></div></figure></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>All of the files for theming etc. are available <a href="https://github.com/davidad/davidad.github.io/tree/source">here</a>. I&rsquo;ve spent way too much time tweaking the CSS, and fixing various peeves with the way Octopress renders &mdash; I could write an entire other blog post about that, but I probably won&rsquo;t.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Or <code>:x</code>. My muscle memory has been <code>:wq</code> for many years and I haven&rsquo;t yet made a serious effort to retrain.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>One example where we don&rsquo;t want these actions is if the blog post was aborted. Then there&rsquo;s no sense in tabbing back to the preview just to show that it&rsquo;s gone, but if the user is looking at the preview anyway, may as well refresh it to reflect the abort.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Chrome will even restore your scroll position once the refresh is finished.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>You can also pass AppleScript on <code>osascript</code>&rsquo;s command line using the <code>-e</code> option, but only one line of AppleScript at a time. And since there&rsquo;s no statement separator in AppleScript, we can&rsquo;t easily transform an arbitrary script into a one-liner (like we could in <code>bash</code>, or many other more sensible languages).<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>using a newly generated AppleScript which won&rsquo;t cause Chrome to switch the active tab, in case the abort was related to something else having come up.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
